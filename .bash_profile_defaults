###############

alias transpose="python ~/unixboxen/bin/transpose.py"
alias ss="/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine &"
alias pp='python -mjson.tool'

alias kut='mplayer -playlist  http://www.publicbroadcasting.net/kut/ppr/kut.pls'
alias kut2='mplayer -playlist  http://www.publicbroadcasting.net/kut/ppr/kut2.pls'
alias kut3='mplayer -playlist  http://www.publicbroadcasting.net/kut/ppr/kut3.pls'
alias kmfa='mplayer -playlist http://www.publicbroadcasting.net/kmfa/ppr/kmfa-noad.pls'
alias koop='mplayer -playlist http://www.koop.org/sites/default/files/stream/KOOP-Stream-MP3.pls'
alias kvrx='mplayer -playlist ~/.mplayer/kvrx.pls'
alias resonancefm='mplayer -playlist http://radio.canstream.co.uk:8004/live.mp3.m3u'
alias ls='ls -GF'

somafm() { local station;echo "Select a station to listen to:";select station in "Silent" "Seventies" "Fluid" "Bagel" "Doomed" "Groove Salad" "Lush" "Suburbs of Goa" "Secret Agent" "Drone Zone" "Space Station" "cliqhop idm" "Digitalis" "Sonic Universe" "Boot Liquor" "Covers" "Illinois Street Lounge" "indie pop rocks" "PopTron" "Tags Trip" "Beat Bender" "Mission Control" "defcon" ;do station=$(echo -n "$station"|tr '[:upper:]' '[:lower:]'|sed 's/ //g');break;done;mplayer -vo none  -playlist http://somafm.com/${station}.pls;}

export CLICOLOR=1
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
###############

bash_prompt_command() {
    # How many characters of the $PWD should be kept
    local pwdmaxlen=25
    # Indicate that there has been dir truncation
    local trunc_symbol="..."
    local dir=${PWD##*/}
    pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
    NEW_PWD=${PWD/#$HOME/\~}
    local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
    if [ ${pwdoffset} -gt "0" ]
    then
        NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
        NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
    fi
}

function add_git_branch() {
GB=`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [ "$GB" != "" ];
  then
    echo "($GB)"
  fi
}

bash_prompt() {
    case $TERM in
     xterm*|rxvt*)
          local TITLEBAR='\[\033]0;\u:${NEW_PWD}\007\]'
            ;;
     *)
          local TITLEBAR=""
            ;;
    esac
    local NONE="\[\033[0m\]"    # unsets color to term's fg color
    
    # regular colors
    local K="\[\033[0;30m\]"    # black
    local R="\[\033[0;31m\]"    # red
    local G="\[\033[0;32m\]"    # green
    local Y="\[\033[0;33m\]"    # yellow
    local B="\[\033[0;34m\]"    # blue
    local M="\[\033[0;35m\]"    # magenta
    local C="\[\033[0;36m\]"    # cyan
    local W="\[\033[0;37m\]"    # white
    
    # emphasized (bolded) colors
    local EMK="\[\033[1;30m\]"
    local EMR="\[\033[1;31m\]"
    local EMG="\[\033[1;32m\]"
    local EMY="\[\033[1;33m\]"
    local EMB="\[\033[1;34m\]"
    local EMM="\[\033[1;35m\]"
    local EMC="\[\033[1;36m\]"
    local EMW="\[\033[1;37m\]"
    
    # background colors
    local BGK="\[\033[40m\]"
    local BGR="\[\033[41m\]"
    local BGG="\[\033[42m\]"
    local BGY="\[\033[43m\]"
    local BGB="\[\033[44m\]"
    local BGM="\[\033[45m\]"
    local BGC="\[\033[46m\]"
    local BGW="\[\033[47m\]"
    
    local UC=$C                 # user's color
    [ $UID -eq "0" ] && UC=$R   # root's color
    
   PS1="$TITLEBAR${EMK}[${UC}\${NEW_PWD}${G}\$(add_git_branch)${EMK}]${W} \n${NONE}\$ "
    # without colors: 
    # extra backslash in front of \$ to make bash colorize the prompt
}

bash_prompt
unset bash_prompt

# Consistent and forever bash history
HISTSIZE=100000
HISTFILESIZE=$HISTSIZE
HISTCONTROL=ignorespace:ignoredups
history-tee() {
     history 1 >> $HOME/.bash_eternal_history
}

export HISTTIMEFORMAT="%Y-%m-%dT%H:%M:%S   "
PROMPT_COMMAND="bash_prompt_command;history-tee;history -a"

# print the header (the first line of input)
# and then run the specified command on the body (the rest of the input)
# use it in a pipeline, e.g. ps | body grep somepattern
body() {
    IFS= read -r header
    printf '%s\n' "$header"
    "$@"
}

source ~/unixboxen/git-completion.bash
